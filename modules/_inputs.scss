@use 'sass:math';

$checkbox-input: (
	width: 1em,
	height: 1em,
	border: $input-border-width solid $input-border-color,
	border-radius: $input-border-radius,
) !default;

$checkbox-mark: (
	width: em(6),
	height: em(8),
	border: solid $input-border-color,
	border-width: 0 em(2) em(2) 0,
	transform: rotate(45deg) translate(-50%, -50%),
	transform-origin: 50% 40%,
) !default;

$radio-mark: (
	width: em(6),
	height: em(6),
	background: $input-border-color,
	transform: translate(-50%, -50%),
	border-radius: 50%,
) !default;

%input {
	box-sizing: border-box;
	min-height: 2.5em;
	line-height: 1.5;
	background: transparent;
	border: var(--#{$prefix}input-border-width) var(--#{$prefix}input-border-color) solid;
	border-radius: $input-border-radius;
	padding: var(--#{$prefix}input-padding);
	display: block;
	width: 100%;
	transition: all 0.1s ease;
	&:focus-visible {
		outline: 2px solid $brand-main;
		outline-offset: 1px;
		// box-shadow: 0 0 0.375em var(--#{$prefix}input-border-color) inset;
	}
}

@mixin inputs {
	:where(input:not([type=button i], [type=reset i], [type=submit i], [type=range i])) {
		@extend %input;
	}

	:where([type=checkbox i], [type=radio i]) {
		width: 1.5em;
		height: 1.5em;
		min-height: 0;
		padding: 0;
		margin-inline-end: 0.25em;
		display: inline-block;
		appearance: none;
		box-sizing: border-box;
		vertical-align: top;
		position: relative;

		&:after {
			display: block;
			content: '';
			box-sizing: border-box;
			transition: all .5s ease;
			position: absolute;
			opacity: 0;
		}

		&:checked {
			&:after {
				opacity: 1;
			}
		}
	}

	:where(input[type=checkbox i]) {
		&:after {
			width: 10px;
			height: 12px;
			border: solid var(--#{$prefix}input-border-color);
			border-width: 0 2px 2px 0;
			transform: rotate(45deg);
			top: 2px;
			left: 5px;
		}
	}

	:where(input[type=radio i]) {
		border-radius: 50%;
		&:after {
			border-radius: 50%;
			border: 5px solid var(--#{$prefix}input-border-color);
			transform: translate(-50%, -50%);
			top: 50%;
			left: 50%;
		}
	}

	:where(textarea) {
		@extend %input;
		vertical-align: top;
		max-width: 100%;
	}

	:where(select) {
		@extend %input;
		height: 2.5em;
		appearance: none;

		&::-ms-expand {
			display: none;
		}

		$knob-width: em(9);
		$knob-height: em(12);
		$knob-color: $body-color;
		$knob: '<svg xmlns="http://www.w3.org/2000/svg" width="#{$knob-width}" height="#{$knob-height}" viewBox="0 0 9 12"><path fill="#{$knob-color}" d="M0.722,4.823L-0.01,4.1,4.134-.01,4.866,0.716Zm7.555,0L9.01,4.1,4.866-.01l-0.732.726ZM0.722,7.177L-0.01,7.9,4.134,12.01l0.732-.726Zm7.555,0L9.01,7.9,4.866,12.01l-0.732-.726Z"/></svg>';
		padding-right: em(24) + $knob-width;
		background: url('data:image/svg+xml;utf8,#{svg-replace($knob)}') no-repeat right em(12) center;
		&.placeholder {
			color: rgba($body-color, 0.5);
		}
	}

	[type=range i] {
		@include where() {
			appearance: none;
			background: transparent;
			cursor: pointer;
			width: 15rem;
		}

		@include where('&:focus-visible') {
			outline: 0;
		}

		/* slider track */
		@include where('&::-webkit-slider-runnable-track, &::-moz-range-track') {
			background-color: #053a5f;
			border-radius: 0.5rem;
			height: 0.5rem;
	 	}

		/* slider thumb */
		// @include where('&::-webkit-slider-thumb') {
		// 	appearance: none;
		// 	margin-top: -12px;
		// 	background-color: #5cd5eb;
		// 	height: 2rem;
		// 	width: 1rem;
		// }

		// @include where('&:focus-visible::-webkit-slider-thumb') {
		// 	border: 1px solid #053a5f;
		// 	outline: 3px solid #053a5f;
		// 	outline-offset: 0.125rem;
		// }

		// @include where('&::-moz-range-thumb') {
		// 	border: none; /*Removes extra border that FF applies*/
		// 	border-radius: 0; /*Removes default border-radius that FF applies*/

		// 	/*custom styles*/
		// 	background-color: #5cd5eb;
		// 	height: 2rem;
		// 	width: 1rem;
	 	// }

		// @include where('&:focus-visible::-moz-range-thumb') {
		// 	border: 1px solid #053a5f;
		// 	outline: 3px solid #053a5f;
		// 	outline-offset: 0.125rem;
		// }
	}
}
